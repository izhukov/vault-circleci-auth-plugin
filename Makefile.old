.DEFAULT_GOAL = build
GO := go
extension = $(patsubst windows,.exe,$(filter windows,$(1)))
PKG_NAME := vault-circleci-auth-plugin
PREFIX := .

version:
	gen-version.sh > version.txt

GOOS ?= $(shell go version | sed 's/^.*\ \([a-z0-9]*\)\/\([a-z0-9]*\)/\1/')
GOARCH ?= $(shell go version | sed 's/^.*\ \([a-z0-9]*\)\/\([a-z0-9]*\)/\2/')

platforms := darwin-amd64 freebsd-amd64 linux-386 linux-amd64 linux-arm linux-arm64 windows-amd64.exe windows-386.exe

alpine-platforms := linux-386 linux-amd64

build-alpine: $(patsubst %,$(PREFIX)/bin/$(PKG_NAME)_alpine_%,$(alpine-platforms))

build-all: $(patsubst %,$(PREFIX)/bin/$(PKG_NAME)_%,$(platforms))

$(PREFIX)/bin/$(PKG_NAME)_%: $(shell find $(PREFIX) -type f -name '*.go')
	GOOS=$(shell echo $* | sed 's/alpine_//' | cut -d- -f1) GOARCH=$(shell echo $* | cut -d- -f2 | cut -d. -f1) CGO_ENABLED=0 \
		$(GO) build \
			-ldflags "-w -s" \
			-o $@ \
			.

$(PREFIX)/bin/$(PKG_NAME)$(call extension,$(GOOS)): $(PREFIX)/bin/$(PKG_NAME)_$(GOOS)-$(GOARCH)$(call extension,$(GOOS))
	cp $< $@

build: Dockerfile
	docker build \
		--target artifacts \
		--iidfile artifacts.iid \
		.

test-unit:
	$(GO) test -v -race ./...

release:

clean:
	rm -Rf $(PREFIX)/bin/*

.PHONY: clean version
.PHONY: build build-alpine build-all
.PHONY: release
